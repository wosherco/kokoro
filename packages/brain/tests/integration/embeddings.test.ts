import { getEmbedding } from "@kokoro/brain";
import type { StartedTestContainer } from "testcontainers";
import { afterAll, beforeAll, describe, expect, it, vi } from "vitest";
import { createEmbeddingServiceContainer } from "./containers";

vi.mock("../../env", () => ({
  env: {
    EMBEDDING_SERVICE_URL: "http://localhost:3000",
  },
}));

const helloWorldEmbedding = [
  -0.03817715, 0.032911092, -0.005459434, 0.014369924, -0.04029103,
  -0.116532505, 0.031687625, 0.0019116851, -0.04262231, 0.029168077,
  0.042426728, 0.032041784, 0.029844673, 0.010980282, -0.053939592,
  -0.050277233, -0.023507874, 0.010779401, -0.13770796, 0.004115025,
  0.029333083, 0.06684117, -0.015389434, 0.04843767, -0.088149674, -0.012726825,
  0.041409083, 0.040831488, -0.050155893, -0.058125094, 0.048801556, 0.06889014,
  0.05874689, 0.008731013, -0.015918298, 0.085142, -0.07814738, -0.07751681,
  0.020723797, 0.016194308, 0.03251059, -0.053488854, -0.0622288, -0.024314651,
  0.007412804, 0.023977727, 0.006360908, 0.05114505, 0.0727667, 0.03464968,
  -0.05477116, -0.05932848, -0.0071669496, 0.020137707, 0.03584633,
  0.0055909147, 0.0107735405, -0.052763734, 0.010147378, -0.008731634,
  -0.0628156, 0.03846675, -0.01394278, 0.073525906, 0.09000837, -0.07998073,
  -0.01639453, 0.044722352, -0.068831235, -0.03300762, -0.015351174,
  0.011299703, 0.036498345, 0.066266626, -0.054406624, 0.008795197, 0.012074574,
  -0.038169622, 0.0068601416, 0.0511236, 0.07741758, -0.122962564, 0.016353086,
  0.049542755, 0.031745423, -0.039668765, 0.0017092149, 0.009669422,
  -0.032529894, -0.03392949, -0.13326462, 0.0073970775, -0.010234244,
  0.038591463, -0.09330991, -0.041654043, 0.06986871, -0.026288612, -0.14969823,
  0.13435306, 0.03750278, 0.052878544, 0.044967115, 0.018599529, 0.05442518,
  0.017271684, -0.03251827, 0.046080194, -0.04673769, -0.030609688,
  -0.018226882, -0.048695758, 0.03285804, -0.0039209398, 0.05010561,
  -0.05824541, -0.010080897, 0.010550237, -0.04015608, -0.0015540415,
  0.060876857, -0.045500588, 0.049259916, 0.026124274, 0.01985052, -0.00158546,
  0.059572466, -6.51836e-33, 0.06358519, 0.003068095, 0.028884497, 0.1733897,
  0.0029947418, 0.027689695, -0.09514827, -0.031160837, 0.026669871,
  -0.010871285, 0.02391519, 0.023844387, -0.031216517, 0.049405664,
  -0.024978744, 0.10182422, -0.07927838, -0.0032487758, 0.043046214, 0.09493306,
  -0.06657359, 0.006329255, 0.022278871, 0.069976814, -0.0075304173,
  -0.0017452158, 0.02704469, -0.07532431, 0.11405782, 0.008559888, -0.023688003,
  -0.046980474, 0.014371923, 0.019820655, -0.004584359, 0.0013742493,
  -0.03431934, -0.054123454, -0.09416455, -0.028959781, -0.018795108,
  0.045819998, 0.047589064, -0.003194928, -0.033217207, -0.013389058,
  0.051031604, 0.03107583, 0.015314479, 0.054222256, -0.08505545, 0.013304512,
  -0.047814094, 0.071023405, -0.013159958, -0.0024290807, 0.050218437,
  -0.041609447, -0.014169526, 0.03238826, 0.00537521, 0.09122618, 0.004551215,
  -0.018342217, -0.015202972, -0.046372373, 0.03867085, 0.0146850785,
  0.052002467, 0.0019089697, -0.014917422, 0.027028972, 0.031272575,
  0.023684202, -0.0048039905, 0.03616182, 0.066788755, -0.0018908537,
  0.021374337, -0.057692707, 0.019157752, 0.031559035, -0.018447055,
  -0.04077106, 0.10395839, 0.011907483, -0.014929504, -0.10507839, -0.012370967,
  -0.00030393977, -0.09503244, 0.058301337, 0.04261099, -0.025012402,
  -0.09460908, 4.0034186e-33, 0.132173, 0.005458302, -0.033151332, -0.09107807,
  -0.03157392, -0.03388642, -0.07198888, 0.1259119, -0.08339331, 0.05277822,
  0.0011282434, 0.021977773, 0.104063675, 0.012988781, 0.04087155, 0.01873063,
  0.114286385, 0.024865387, 0.014610405, 0.0061867996, -0.011373528,
  -0.035700943, -0.038039695, 0.011174781, -0.051289808, 0.007886748,
  0.06722051, 0.0034040194, -0.09284789, 0.0370485, -0.022238811, 0.04007822,
  -0.03071321, -0.011421409, -0.0144186625, 0.025045274, -0.09755718,
  -0.035395794, -0.037520975, -0.0100684175, -0.06388622, 0.02547251,
  0.020622358, 0.037677098, -0.10428166, -0.028280595, -0.052105777,
  0.012858819, -0.05142375, -0.02903799, -0.09639792, -0.042360596, 0.06705968,
  -0.030770654, -0.010394415, 0.027410237, -0.028010389, 0.010289224,
  0.043091483, 0.02229767, 0.008011392, 0.056147087, 0.040886033, 0.09287604,
  0.016584923, -0.053824745, 0.0005741582, 0.050784223, 0.042487487,
  -0.029206917, 0.009238967, -0.010673626, -0.0371527, 0.0023669752,
  -0.030345699, 0.074505314, 0.0026297309, -0.017609095, 0.0028207127,
  0.038374305, 0.007227643, 0.045675695, 0.04004275, 0.01424761, -0.014316053,
  0.058655556, 0.036353063, 0.055234604, -0.019988356, -0.08044617,
  -0.030247718, -0.014912973, 0.022268848, 0.011962588, -0.06910142,
  -1.8807098e-8, -0.078550555, 0.046710864, -0.024080478, 0.06343823,
  0.024013866, 0.0014395501, -0.090835325, -0.06687592, -0.08007827,
  0.005666403, 0.05365837, 0.10486628, -0.06688055, 0.015498431, 0.06711852,
  0.070886865, -0.03198994, 0.020883488, -0.02193842, -0.007268894,
  -0.010812541, 0.00409002, 0.033155505, -0.07897838, 0.0387152, -0.07532027,
  -0.01580482, 0.0059606778, 0.005198967, -0.061430234, 0.042005807, 0.09536278,
  -0.043233432, 0.014393406, -0.10608738, -0.02799422, 0.010966202, 0.069530666,
  0.066980995, -0.07477545, -0.07857462, 0.04274654, -0.034603782, -0.106056295,
  -0.03563346, 0.051501255, 0.06867364, -0.049974497, 0.015289859, -0.06455741,
  -0.07593396, 0.026154263, 0.074264236, -0.012449773, 0.13329785, 0.07476633,
  0.0512522, 0.020990364, -0.026876, 0.08890625, 0.040021077, -0.040890288,
  0.031871397, 0.018163195,
];

describe("getEmbedding", () => {
  let embeddingServiceContainer: StartedTestContainer | undefined;

  beforeAll(async () => {
    embeddingServiceContainer = await createEmbeddingServiceContainer();
  });

  afterAll(async () => {
    await embeddingServiceContainer?.stop();
  });

  it("should return an embedding", async () => {
    const embedding = await getEmbedding("Hello, world!");
    expect(embedding).toBeDefined();
    expect(embedding).toEqual(helloWorldEmbedding);
  });
});
